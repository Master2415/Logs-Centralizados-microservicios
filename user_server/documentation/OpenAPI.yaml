openapi: 3.0.0
info:
  title: Go API Documentation
  description: Documentation for the Go API with Swagger
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /api/login:
    post:
      summary: Logs in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/recover/{email}:
    get:
      summary: Recovers password for a user
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password recovered successfully
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /api/update:
    post:
      summary: Updates user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePassword'
      responses:
        '200':
          description: Password updated successfully
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/add:
    post:
      summary: Adds a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
  /api/update:
    put:
      summary: Updates user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/delete:
    delete:
      summary: Deletes a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/search/{id}:
    get:
      summary: Retrieves a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /api/all:
    get:
      summary: Retrieves all users
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserUpdatePassword:
      type: object
      properties:
        id:
          type: integer
        password:
          type: string
      required:
        - id
        - password
